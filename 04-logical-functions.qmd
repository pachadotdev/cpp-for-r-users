
# Logical Functions

## Motivation

This chapter covers the implementation of simple logical functions in C++ and R. The goal is to show the syntax differences between the two languages and compare their performance. These examples were adapted from @vaughan.

## Fair Warning

These functions ignore `NA` values. Adjustments for handling `NA` values will be introduced in the sixth chapter.

R already provides efficient versions of the functions covered here. Code optimizations and improvements will be made in later chapters.

## Load the Package

I loaded the `ece244` package as I added the functions from the next sections to it with the following code:

```{r 03-setup}
load_all()
```

## Additional Packages

I used the `bench` package to compare the performance of the functions. The package was loaded with the following code:

```{r 03-bench}
library(bench)
```

## Are Some Values True? (`any()`)

The `any()` function returns `TRUE` if there is at least one `TRUE` element in a vector, and `FALSE` otherwise. Below is one possible C++ implementation:

```cpp
[[cpp11::register]] bool any_cpp_(logicals x) {
  int n = x.size();
  
  for (int i = 0; i < n; ++i) {
    if (x[i]) {
      return true;
    }
  }
  return false;
}
```

Its R equivalent is:

```r
#' Return TRUE if any element in a vector is TRUE (R)
#' @param x logical vector
#' @export
any_r <- function(x) {
  n <- length(x)
  
  for (i in 1:n) {
    if (x[i]) {
      return(TRUE)
    }
  }
  FALSE
}
```

To document the C++ function, I added the following wrapper to the R code:

```r
#' Return TRUE if any element in a vector is TRUE (C++)
#' @inheritParams any_r
#' @export
any_cpp <- function(x) {
  any_cpp_(x)
}
```

To test the functions, I ran the following benchmark code in the R console:

```{r 04-functions-bench2}
set.seed(123) # for reproducibility
x <- rpois(1e6, lambda = 2) # 1,000,000 elements
y <- ifelse(x > 2, TRUE, FALSE)

any(y)
any_cpp(y)
any_r(y)

mark(
  any(y),
  any_cpp(y),
  any_r(y)
)
```

## Which Indices are TRUE? (`which()`)

The `which()` function returns the indices of the `TRUE` elements in a vector. Here is a possible C++ implementation:

```cpp
[[cpp11::register]] integers which_cpp_(logicals x) {
  int n = x.size();
  writable::integers res;
  int j = 0;

  for (int i = 0; i < n; ++i) {
    if (x[i]) {
      ++j;
      res.push_back(i + 1);
    }
  }

  if (j == 0) {
    return integers(0);
  } else {
    return res;
  }
}
```

Its R equivalent is:

```r
#' Return the indexes of the TRUE elements in a vector (R)
#' @param x vector of values
#' @export
which_r <- function(x) {
  n <- length(x)
  res <- c()
  j <- 0

  for (i in 1:n) {
    if (x[i]) {
      res <- c(res, i)
      j <- j + 1
    }
  }

  if (j == 0) {
    return(0)
  } else {
    return(res)
  }
}
```

To document the C++ function, I added the following wrapper to the R code:

```r
#' Return the index of the TRUE elements in a vector (C++)
#' @inheritParams which_r
#' @export
which_cpp <- function(x) {
  which_cpp_(x)
}
```

To test the functions, I ran the following benchmark code in the R console:

```{r 04-functions-which-bench}
which(y[1:100])
which_cpp(y[1:100])
which_r(y[1:100])

mark(
  which(y[1:1000]),
  which_cpp(y[1:1000]),
  which_r(y[1:1000])
)
```

## Are All Values True? (`all()`)

The `all()` function checks if all elements in a vector are `TRUE`. Here is a possible C++ implementation that loops over the vector:

```cpp
[[cpp11::register]] bool all_cpp_1_(logicals x) {
  int n = x.size();
  for (int i = 0; i < n; ++i) {
    if (!x[i]) {
      return false;
    }
  }
  return true;
}
```

More concise C++ alternatives are:

```cpp
[[cpp11::register]] bool all_cpp_2_(logicals x) {
  for (int i = 0; i < x.size(); ++i) {
    if (!x[i]) {
      return false;
    }
  }
  return true;
}

[[cpp11::register]] bool all_cpp_3_(logicals x) {
  for (bool i : x) {
    if (!i) {
      return false;
    }
  }
  return true;
}

[[cpp11::register]] bool all_cpp_4_(logicals x) {
  return std::all_of(x.begin(), x.end(), [](bool x) { return x; });
}
```

To avoid typing `std::` every time, you can use `using namespace std;` at the top of `src/code.cpp`. However, this is not recommended because it can lead to conflicts. A better option is to declare `using std::the_function;` which means you can use `the_function` instead of `std::the_function` each time [@akbiggs].

To test the functions, I ran the following tests and benchmark code in the R console:

```{r 05-functions-all-correctness}
set.seed(123) # for reproducibility
x <- rpois(1e6, lambda = 2) # 1,000,000 elements

all(x > 2)
all_cpp_1_(x > 2)
all_cpp_2_(x > 2)
all_cpp_3_(x > 2)
all_cpp_4_(x > 2)

# also test the TRUE-only case
all(x >= 0)
all_cpp_1_(x >= 0)
all_cpp_2_(x >= 0)
all_cpp_3_(x >= 0)
all_cpp_4_(x >= 0)
```

```{r 05-functions-all-benchmark}
mark(
  all(x > 2),
  all_cpp_1_(x > 2),
  all_cpp_2_(x > 2),
  all_cpp_3_(x > 2),
  all_cpp_4_(x > 2)
)
```

## References
