
# Package Skeleton

## Motivation

@cpp11 is better used when adding C++ code to R packages, as it allows for proper script organization and documentation. The reference for this chapter is @usethis.

## Loading the Required R Packages

This chapter and the next use the following R packages:

```r
library(cpp11)
library(devtools)
library(bench)
library(usethis)
```

## Running a single function

It is possible to run a single function in C++ using the `cpp11::cpp_source()` function. For example, to create a function that adds one to a number, you can run:

```{r}
cpp11::cpp_source(
  code = "
    #include <cpp11.hpp>

    using namespace cpp11;

    [[cpp11::register]] int plusone(int x) {
      return x + 1;
    }",
  quiet = FALSE
)
```

This function can be called from R by running `plusone(2)`, which should return 3, or with any other integer.

However, it is a much better practice to organize C++ code in an R package.

## Creating a Dummy Package

I created a new package in RStudio (or VSCode) by running:

```r
create_package("~/github/cpp-for-r-users/ece244")
```

This command created a new folder named `ece244`. Afterward, I ran `use_cpp11()` to add the necessary files for using C++ code within R.

## Print a Number

I created a new R script by running `use_r("ece244-package")`. I added the following code to the file:

```r
#' @useDynLib ece244, .registration = TRUE
NULL
```

The `usethis` package automatically created the file `src/code.cpp`. I modified it to include a simple function that prints the number 1:

```cpp
#include "cpp11.hpp"

using namespace cpp11;

[[cpp11::register]] int one_cpp_() { 
  return 1; 
}
```

Within R, there is no need to create a `main()` function in C++.

The R version of the function is as follows:

```r
#' Return 1 (R)
#' @export
one_r <- function() {
    1L
}
```

To export the C++ function, I added the following lines to `ece244-package.R`, which documents the function and allows for defining default argument values:

```r
#' Return 1 (C++)
#' @export
one_cpp <- function() {
  one_cpp_()
}
```

## Number's Sign

A more complex function is one that returns the sign of a number:

```cpp
[[cpp11::register]] int sign_cpp_(double x) {
  if (x > 0) {
    return 1;
  } else if (x == 0) {
    return 0;
  } else {
    return -1;
  }
}
```

Here is the R version of the function:

```r
#' Return the sign of a number (R)
#' @param x integer
#' @export
sign_r <- function(x) {
  if (x > 0) {
    1
  } else if (x == 0) {
    0
  } else {
    -1
  }
}
```

I also added the corresponding auxiliary function for documentation:

```r
#' Return the sign of a number (C++)
#' @inheritParams sum_r
#' @export
sign_cpp <- function(x) {
  sign_cpp_(x)
}
```

## Installing the Package

To document and install the package as an R library, I ran the next functions:

```r
cpp_register()
document()
install()
```

Afterward, I could access the functions by loading the package with `library(ece244)`.

For development and live testing, I used the `load_all()` function:

```{r pkg-load}
load_all()
```

Each time I had to make changes to the C++ code, I ran `load_all()` again to test and then reinstalled the package.

## Good Practice

It is good practice to include a license for your code. For example, you can use the Apache license by running:

```r
use_apache_license()
```

Additionally, it is recommended to use `use_build_ignore()` to ignore files that are unnecessary for package installation. For example, to ignore the `docs` folder, you can run:

```r
use_build_ignore("docs")
```

My `.Rbuildignore` file includes the following lines, which I edited manually to exclude specific files and directories:

```
^\.vscode$
^LICENSE\.md$
^ece244\.Rproj$
```

## References
